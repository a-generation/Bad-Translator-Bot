import re
import logging
from aiogram import types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from states import TranslationState
from translator import wrong_translator
from aiogram import F

def register_handlers(dp, bot):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä bot
    @dp.message(Command("start"))
    async def start(message: types.Message, state: FSMContext):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º!")
        await state.set_state(TranslationState.waiting_for_text)

    @dp.message(TranslationState.waiting_for_text)
    async def get_text(message: types.Message, state: FSMContext):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await state.update_data(text=message.text)
        await message.answer("üî¢ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
        await state.set_state(TranslationState.waiting_for_iterations)

    @dp.message(Command("translate"))
    async def translate_in_group(message: types.Message, state: FSMContext):
        """–ü–µ—Ä–µ–≤–æ–¥ –≤ –≥—Ä—É–ø–ø–µ —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º: /translate <–∫–æ–ª–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤> "—Ç–µ–∫—Å—Ç" """
        match = re.match(r"/translate (\d+) \"(.+)\"", message.text)
        
        if not match:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫:\n`/translate 5 \"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\"`", parse_mode="Markdown")
            return
        
        iterations = int(match.group(1))
        text = match.group(2)

        if iterations < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        
        await message.answer("‚è≥ –ü–µ—Ä–µ–≤–æ–∂—É...")

        final_text, used_languages = wrong_translator(text, iterations)
        lang_list = ", ".join(used_languages)

        await message.answer(
            f"üìú <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<code>{text}</code>\n\n"
            f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:</b> {iterations}\n\n"
            f"üåç <b>–¢–µ–∫—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏–ª —á–µ—Ä–µ–∑ —è–∑—ã–∫–∏:</b> {lang_list}\n\n"
            f"üîÑ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n<code>{final_text}</code>",
            parse_mode="HTML"
        )

    @dp.message(TranslationState.waiting_for_iterations, F.text.isdigit())
    async def get_iterations(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π"""
        iterations = int(message.text)
        if iterations < 1:
            await message.answer("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        await state.update_data(iterations=iterations)
        user_data = await state.get_data()
        text = user_data["text"]

        await message.answer("‚è≥ –ü–µ—Ä–µ–≤–æ–∂—É...")

        final_text, used_languages = wrong_translator(text, iterations)
        lang_list = ", ".join(used_languages)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ï—â—ë —Ä–∞–∑", callback_data="again")],
            [InlineKeyboardButton(text="üé≤ –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="new")]
        ])

        await message.answer(
            f"üìú <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<code>{text}</code>\n\n"
            f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:</b> {iterations}\n\n"
            f"üåç <b>–¢–µ–∫—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏–ª —á–µ—Ä–µ–∑ —è–∑—ã–∫–∏:</b> {lang_list}\n\n"
            f"üîÑ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n<code>{final_text}</code>",
            reply_markup=kb
        )
        
        await state.set_state(TranslationState.ready_for_repeat)

    @dp.callback_query(lambda c: c.data == "again")
    async def repeat_translation(callback_query: types.CallbackQuery, state: FSMContext):
        """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        user_data = await state.get_data()
        
        if not user_data or "text" not in user_data or "iterations" not in user_data:
            await callback_query.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç!")
            await state.set_state(TranslationState.waiting_for_text)
            return

        text = user_data["text"]
        iterations = user_data["iterations"]

        await bot.send_message(callback_query.message.chat.id, "‚è≥ –ü–µ—Ä–µ–≤–æ–∂—É —Å–Ω–æ–≤–∞...")

        final_text, used_languages = wrong_translator(text, iterations)
        lang_list = ", ".join(used_languages)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ï—â—ë —Ä–∞–∑", callback_data="again")],
            [InlineKeyboardButton(text="üé≤ –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="new")]
        ])

        await bot.send_message(
            callback_query.message.chat.id,
            f"üìú <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<code>{text}</code>\n\n"
            f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:</b> {iterations}\n\n"
            f"üåç <b>–¢–µ–∫—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏–ª —á–µ—Ä–µ–∑ —è–∑—ã–∫–∏:</b> {lang_list}\n\n"
            f"üîÑ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n<code>{final_text}</code>",
            reply_markup=kb
        )

    @dp.callback_query(lambda c: c.data == "new")
    async def new_translation(callback_query: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        await state.set_state(TranslationState.waiting_for_text)
        await bot.send_message(callback_query.message.chat.id, "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç!")